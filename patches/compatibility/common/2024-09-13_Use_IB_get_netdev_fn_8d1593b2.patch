diff --git a/rxe/rxe_verbs.c b/rxe/rxe_verbs.c
index a105b8f..8d72bc3 100644
--- a/rxe/rxe_verbs.c
+++ b/rxe/rxe_verbs.c
@@ -1529,3 +1529,39 @@ int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name,
 	 */
 	return err;
 }
+
+struct net_device *rxe_tmp_ib_device_get_netdev(struct ib_device *ib_dev, u32 port)
+{
+	struct ib_port_data *pdata;
+	struct net_device *res;
+	if (!rdma_is_port_valid(ib_dev, port))
+		return NULL;
+
+	pdata = &ib_dev->port_data[port];
+
+	/*
+	 * New drivers should use ib_device_set_netdev() not the legacy
+	 * get_netdev().
+	 */
+	if (ib_dev->ops.get_netdev)
+		res = ib_dev->ops.get_netdev(ib_dev, port);
+	else {
+		spin_lock(&pdata->netdev_lock);
+		res = rcu_dereference_protected(
+		pdata->netdev, lockdep_is_held(&pdata->netdev_lock));
+		if (res)
+			dev_hold(res);
+		spin_unlock(&pdata->netdev_lock);
+	}
+
+	/*
+	 * If we are starting to unregister expedite things by preventing
+	 * propagation of an unregistering netdev.
+	 */
+	if (res && res->reg_state != NETREG_REGISTERED) {
+		dev_put(res);
+		return NULL;
+	}
+
+	return res;
+}
diff --git a/rxe/rxe_verbs.h b/rxe/rxe_verbs.h
index c49aab7..18756a6 100644
--- a/rxe/rxe_verbs.h
+++ b/rxe/rxe_verbs.h
@@ -459,9 +459,10 @@ struct rxe_dev {
 
 void recv_worker(struct work_struct *work);
 
+struct net_device *rxe_tmp_ib_device_get_netdev(struct ib_device *ib_dev, u32 port);
 static inline struct net_device *rxe_ib_device_get_netdev(struct ib_device *dev)
 {
-	return ib_device_get_netdev(dev, RXE_PORT);
+	return rxe_tmp_ib_device_get_netdev(dev, RXE_PORT);
 }
 
 static inline void rxe_counter_inc(struct rxe_dev *rxe, enum rxe_counters index)
