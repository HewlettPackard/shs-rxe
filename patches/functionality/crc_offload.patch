diff --git a/rxe/rxe_icrc.c b/rxe/rxe_icrc.c
index e03af30..df9d4e8 100644
--- a/rxe/rxe_icrc.c
+++ b/rxe/rxe_icrc.c
@@ -129,6 +129,43 @@ static __be32 rxe_icrc_hdr(struct sk_buff *skb, struct rxe_pkt_info *pkt)
 	return crc;
 }
 
+#define CXI_ETH_PF_ROCE_OPT	BIT(5) /* RoCE Cassini Optimizations */
+static int crc_offload = -1;
+static inline void init_rocev2_crc_offload(struct net_device *ndev, struct rxe_dev *rxe)
+{
+	if (crc_offload != -1) {
+		rxe_dbg_dev(rxe, "Crc optimizations for Cassini already set to %s\n", crc_offload == 1 ? "On" : "Off");
+		return;
+	}
+	if (!ndev->dev.parent || !ndev->dev.parent->driver ||
+			(strncmp("cxi_ss1", ndev->dev.parent->driver->name, strlen("cxi_ss1")) != 0)) {
+		crc_offload = 0;
+		return;
+	}
+	if (!ndev->ethtool_ops || !(ndev->ethtool_ops->get_priv_flags) ||
+			((ndev->ethtool_ops->get_priv_flags(ndev) & CXI_ETH_PF_ROCE_OPT) == 0)) {
+		crc_offload = 0;
+		return;
+	}
+	crc_offload = 1;
+	return;
+}
+
+static inline bool rocev2_crc_offload(struct net_device *ndev, struct rxe_dev *rxe)
+{
+	if (unlikely(crc_offload == -1))
+		init_rocev2_crc_offload(ndev, rxe);
+
+	if (crc_offload == 1)
+		return true;
+	return false;
+}
+
+bool rxe_icrc_offload(struct net_device *ndev, struct rxe_dev *rxe)
+{
+	return rocev2_crc_offload(ndev, rxe);
+}
+
 /**
  * rxe_icrc_check() - Compute ICRC for a packet and compare to the ICRC
  *		      delivered in the packet.
@@ -143,6 +143,9 @@ int rxe_icrc_check(struct sk_buff *skb, struct rxe_pkt_info *pkt)
 	__be32 pkt_icrc;
 	__be32 icrc;
 
+	if (rocev2_crc_offload(skb->dev, pkt->rxe))
+		return 0;
+
 	icrc = rxe_icrc_hdr(skb, pkt);
 	icrc = rxe_icrc_payload(skb, pkt, icrc, &icrcp);
 
@@ -167,6 +170,15 @@ void rxe_icrc_generate(struct sk_buff *skb, struct rxe_pkt_info *pkt)
 	__be32 *icrcp;
 	__be32 icrc;
 
+	if (rocev2_crc_offload(skb->dev, pkt->rxe)) {
+		skb->ip_summed = CHECKSUM_PARTIAL;
+
+		/* No checksum needed for UDP, but this prevents the
+		 * stack from resetting the transport header pointer.
+		 */
+		skb->csum_start = skb_transport_header(skb) - skb->head;
+		return;
+	}
 	icrc = rxe_icrc_hdr(skb, pkt);
 	icrc = rxe_crc32(pkt->rxe, icrc, (u8 *)payload_addr(pkt),
 
diff --git a/rxe/rxe_loc.h b/rxe/rxe_loc.h
index a115d1d..1041c82 100644
--- a/rxe/rxe_loc.h
+++ b/rxe/rxe_loc.h
@@ -182,6 +182,7 @@ int rxe_responder(void *arg);
 
 /* rxe_icrc.c */
 int rxe_icrc_init(struct rxe_dev *rxe);
+bool rxe_icrc_offload(struct net_device *ndev, struct rxe_dev *rxe);
 int rxe_icrc_check(struct sk_buff *skb, struct rxe_pkt_info *pkt);
 void rxe_icrc_generate(struct sk_buff *skb, struct rxe_pkt_info *pkt);
 
diff --git a/rxe/rxe_icrc.c b/rxe/rxe_icrc.c
index 8df2ba1..f1a24dc 100644
--- a/rxe/rxe_icrc.c
+++ b/rxe/rxe_icrc.c
@@ -187,6 +187,8 @@ static inline void init_rocev2_crc_offload(struct net_device *ndev, struct rxe_d
		rxe_dbg_dev(rxe, "Crc optimizations for Cassini already set to %s\n", crc_offload == 1 ? "On" : "Off");
		return;
	}
+	if (is_vlan_dev(ndev))
+		ndev = vlan_dev_real_dev(ndev);
	if (!ndev->dev.parent || !ndev->dev.parent->driver ||
			(strncmp("cxi_ss1", ndev->dev.parent->driver->name, strlen("cxi_ss1")) != 0)) {
		crc_offload = 0;
